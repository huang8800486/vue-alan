2018.8.9 Vue Router

<!-- 使用 router-link 组件来导航. -->
<!-- 通过传入 `to` 属性指定链接. -->
<!-- <router-link> 默认会被渲染成一个 `<a>` 标签 -->

<div>
    <router-link to="Alan1">Alan1</router-link>
    <router-link to="/Alan2">Alan2</router-link>
    <router-link :to="'Alan3'">Alan3</router-link>
    <router-link :to="'/Alan4'">Alan4</router-link>
    <a href="javascript:;" @click="goback">返回</a>
</div>
<!-- 路由出口 -->
<!-- 路由匹配到的组件将渲染在这里 -->
<router-view/>

通过注入路由器，我们可以在任何组件内通过 this.$router 访问路由器，也可以通过 this.$route 访问当前路由：
goback(){
    window.history.length > 1 ? this.$router.go(-1) : this.$router.push('/');
}

二.动态路由匹配
1.像 /user/foo 和 /user/bar 都将映射到相同的user路由。
<router-link :to="'/user/foo'">{ username: 'foo'}</router-link>
<router-link :to="'/user/bar'">{ username: 'bar' }</router-link>

2.响应路由参数的变化
原来的组件实例会被复用, 组件的生命周期钩子不会再被调用。
想对路由参数的变化作出响应的话, watch (监测变化) $route 对象
watch: {
    '$route' (to, from) {
        console.log("from从哪里来: ",  from)
        console.log("to到哪里去: ",  to)
    }
}

2.2 中引入的 beforeRouteUpdate 守卫
//当进入组件之前，执行 beforRouteEnter 路由钩子函数
beforeRouteEnter(to,from,next){
    console.log('beforRouteEnter')
    console.log(this) // 结果为undefined，因为在执行beforRouteEnter时候，组件还没有被创建出来；先执行beforRouteEnter，再执行beforeCreate
    next()
},
// 响应路由参数的变化
beforeRouteUpdate(to,from,next){
    console.log("from从哪里来: ",  from)
    console.log("to到哪里去: ",  to)
    next()
},
//离开组件的时候触发
beforeRouteLeave(to,from,next){
    //什么都不写的时候，不会离开(走下一步)
    next()
}

三.嵌套路由
routes: [
    { 
        path: '/user/:id', 
        component: User,
        children: [
            {
                // 当 /user/:id/profile 匹配成功，
                // UserProfile 会被渲染在 User 的 <router-view> 中
                path: 'profile',
                component: UserProfile
            },
            {
                // 当 /user/:id/posts 匹配成功
                // UserPosts 会被渲染在 User 的 <router-view> 中
                path: 'posts',
                component: UserPosts
            }
      ]
    }
]

四.编程式的导航
除了使用 <router-link> 创建 a 标签来定义导航链接，我们还可以借助 router 的实例方法，通过编写代码来实现。
#router.push(location, onComplete?, onAbort?)

// 字符串
this.$router.push('home')

// 对象
this.$router.push({ path: 'home' })

// 命名的路由
this.$router.push({ path: `/user/${userId}` }) // -> /user/123

// 带查询参数，变成 /register?plan=private
this.$router.push({ path: 'register', query: { plan: 'private' }})


# 重定向和别名
// 从 /a 重定向到 name: 'foo'
routes: [
    { 
        path: '/a', 
        redirect: { name: 'foo' }
    }
]

#别名
/a 的别名是 /b，意味着，当用户访问 /b 时，URL 会保持为 /b，但是路由匹配则为 /a，就像用户访问 /a 一样。
routes: [
    { 
        path: '/a', 
        component: A, 
        alias: '/b' 
    }
]


#全局守卫
router.beforeEach注册一个全局前置守卫：
to: Route: 即将要进入的目标 路由对象
from: Route: 当前导航正要离开的路由
next: Function: 一定要调用该方法来 resolve 这个钩子。执行效果依赖 next 方法的调用参数。

route/index.js
Vue.use(Router)
let myRouter =  new Router({
  routes: [
    {
      path: '/',
      name: 'HelloWorld',
      redirect: '/HelloWorld',
      component: HelloWorld
    }
  ]
})
// 全局守卫
myRouter.beforeEach((to, from, next) => {
    // to.path 组件路径
    let pathName = to.path.split('/')[1]
})
export default myRouter

#路由独享的守卫
const router = new VueRouter({
  routes: [
    {
      path: '/foo',
      component: Foo,
      beforeEnter: (to, from, next) => {
        // ...
      }
    }
  ]
})

# 路由元信息
myRouter.beforeEach((to, from, next) => {
    // to.path 组件路径
    let pathName = to.path.split('/')[1]
    if (to.matched.some(record => record.meta.needLogin)) {
        // 如果为true, 则跳到login登陆页面
        if (true) {
            next({
                path: "/login"
            })
        } else {
            next()
        }
    } else {
        next() // 确保一定要调用 next()
    }
})


#判断是否为登陆路由的跳转
myRouter.beforeEach((to, from, next) => {
  let pathName = to.path.split('/')[1]
  // console.log(pathName)
  let getCookie = (name) => {
    let arrd = null
    let reg = new RegExp('(^| )' + name + '=([^;]*)(;|$)')
    if (document.cookie.match(reg)) {
      arrd = document.cookie.match(reg)
      return unescape(arrd[2])
    } else {
      return null
    }
  }
  let isLogin = getCookie('token')
  // 未登录可以访问的页面
  let arr = ['index', 'cms', 'register', 'trade', 'help_center', 'forgetPassword', 'login', 'notice_info', 'otcIndex', 'otc_home', 'otc_ads_Hall', 'otc_personal', 'contract', 'mining']
  // 已登录不可以访问的页面
  let sarr = ['login', 'register']
  // 已经登陆过 要跳转login时
  if (sarr.indexOf(to.name) !== -1 && isLogin) {
    next('/')
    return false
  }
  if (!isLogin) {
    if (arr.indexOf(pathName) === -1) {
      // 如果是登录页面路径，就直接next()
      if (to.path === '/login') {
        next()
      } else { // 不然就跳转到登录；
        next('/login')
      }
    } else {
      next()
    }
    return false
  } else {
    next()
  }
})

#基于路由的动态过渡
<transition :name="transitionName">
    <router-view class="child-view"/>
</transition>

export default {
  watch: {
    '$route' (to, from) {
        const toDepth = to.path.split('/').length
        const fromDepth = from.path.split('/').length
        this.transitionName = toDepth < fromDepth ? 'slide-right' : 'slide-left'
    }
  }
}

.child-view { 
    position:absolute;left:0;top:40px;
    -webkit-transition: all 0.3s linear; 
    transition: all 0.3s linear; 
 } 
.slide-left-enter, .slide-right-leave-active {
    -webkit-transform: translate(100%, 0);
    transform: translate(100%, 0); 
 } 
.slide-left-leave-active, .slide-right-enter {
    -webkit-transform: translate(-100%, 0);
    transform: translate(-100%, 0); 
}